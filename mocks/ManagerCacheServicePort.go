// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// ManagerCacheServicePort is an autogenerated mock type for the ManagerCacheServicePort type
type ManagerCacheServicePort struct {
	mock.Mock
}

// GetData provides a mock function with given fields: key, structure
func (_m *ManagerCacheServicePort) GetData(key string, structure interface{}) (interface{}, error) {
	ret := _m.Called(key, structure)

	if len(ret) == 0 {
		panic("no return value specified for GetData")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string, interface{}) (interface{}, error)); ok {
		return rf(key, structure)
	}
	if rf, ok := ret.Get(0).(func(string, interface{}) interface{}); ok {
		r0 = rf(key, structure)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string, interface{}) error); ok {
		r1 = rf(key, structure)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetData provides a mock function with given fields: key, value, expiration
func (_m *ManagerCacheServicePort) SetData(key string, value interface{}, expiration time.Duration) {
	_m.Called(key, value, expiration)
}

// NewManagerCacheServicePort creates a new instance of ManagerCacheServicePort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewManagerCacheServicePort(t interface {
	mock.TestingT
	Cleanup(func())
}) *ManagerCacheServicePort {
	mock := &ManagerCacheServicePort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
