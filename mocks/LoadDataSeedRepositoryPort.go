// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	entities "github.com/johanVargas05/golang-api-hexagonal-architecture/src/domain/entities"
	mock "github.com/stretchr/testify/mock"
)

// LoadDataSeedRepositoryPort is an autogenerated mock type for the LoadDataSeedRepositoryPort type
type LoadDataSeedRepositoryPort struct {
	mock.Mock
}

// Execute provides a mock function with given fields:
func (_m *LoadDataSeedRepositoryPort) Execute() ([]*entities.Portfolio, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 []*entities.Portfolio
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*entities.Portfolio, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*entities.Portfolio); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Portfolio)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLoadDataSeedRepositoryPort creates a new instance of LoadDataSeedRepositoryPort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLoadDataSeedRepositoryPort(t interface {
	mock.TestingT
	Cleanup(func())
}) *LoadDataSeedRepositoryPort {
	mock := &LoadDataSeedRepositoryPort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
