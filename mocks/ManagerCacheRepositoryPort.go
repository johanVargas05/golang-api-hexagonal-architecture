// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	dtos "github.com/johanVargas05/golang-api-hexagonal-architecture/src/domain/dtos/manager_cache"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// ManagerCacheRepositoryPort is an autogenerated mock type for the ManagerCacheRepositoryPort type
type ManagerCacheRepositoryPort struct {
	mock.Mock
}

// GetData provides a mock function with given fields: params
func (_m *ManagerCacheRepositoryPort) GetData(params *dtos.CacheParams) error {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for GetData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*dtos.CacheParams) error); ok {
		r0 = rf(params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetData provides a mock function with given fields: params, expiration
func (_m *ManagerCacheRepositoryPort) SetData(params *dtos.CacheParams, expiration time.Duration) error {
	ret := _m.Called(params, expiration)

	if len(ret) == 0 {
		panic("no return value specified for SetData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*dtos.CacheParams, time.Duration) error); ok {
		r0 = rf(params, expiration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewManagerCacheRepositoryPort creates a new instance of ManagerCacheRepositoryPort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewManagerCacheRepositoryPort(t interface {
	mock.TestingT
	Cleanup(func())
}) *ManagerCacheRepositoryPort {
	mock := &ManagerCacheRepositoryPort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
